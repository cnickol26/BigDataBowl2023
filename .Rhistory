fill = team,
group = nflId,
size = team,
colour = team), alpha=0.7) +
#adding jersey numbers
geom_text(data = df_examplePlayTracking,
aes(x = x, y = y, label = jerseyNumber),
colour = "white",
vjust = 0.36, size = 3.5) +
#titling plot with play description
labs(title = plot_title) +
#setting animation parameters
transition_time(frameId)  +
ease_aes("linear")
animate(anim, width = 720, height = 440,fps = 10, nframes = nFrames)
}
animate_play(random_plays[1])
animate_play(random_plays[2])
animate_play(random_plays[3])
animate_play(random_plays[4])
animate_play(random_plays[5])
animate_play(random_plays[6])
animate_play(random_plays[7])
animate_play(random_plays[8])
animate_play(2021090900137)
animate_play(random_plays[1])
animate_play(random_plays[2])
animate_play(random_plays[3])
animate_play(random_plays[4])
# select all the players besides dbs and wrs
players <- read.csv("https://media.githubusercontent.com/media/cnickol26/BigDataBowl2023/main/nfl-big-data-bowl-2023/players.csv")
positions = c('DE', 'OLB','DT', 'ILB', 'NT', 'MLB', 'LB', 'RB', 'T', 'TE','G','QB','C','FB')
positions_df <- players[players$officialPosition %in% positions]
# select all the players besides dbs and wrs
players <- read.csv("https://media.githubusercontent.com/media/cnickol26/BigDataBowl2023/main/nfl-big-data-bowl-2023/players.csv")
positions = c('DE', 'OLB','DT', 'ILB', 'NT', 'MLB', 'LB', 'RB', 'T', 'TE','G','QB','C','FB')
positions_df <- players[players$officialPosition %in% positions]
players
positions_df <- players[players$officialPosition %in% positions,]
players_list <- positions_df$nflId
players_list
# Read in all the weeks but only for the positons above
locations <- pd.DataFrame()
# Read in all the weeks but only for the positons above
locations <- data.frame()
for (i in 1:8){
url <- 'https://media.githubusercontent.com/media/cnickol26/BigDataBowl2023/main/nfl-big-data-bowl-2023/week'+str(i)+'.csv'
week_data <- read.csv(url)
week_data <- week_data[((week_data['nflId'] %in% players_list) |
(week_data['team'] == 'football')), ]
locations <- rbind(locations, week_data)
}
str(1)
as.character(1)
paste('https://media.githubusercontent.com/media/cnickol26/BigDataBowl2023/main/nfl-big-data-bowl-2023/week', as.character(1), '.csv')
paste('https://media.githubusercontent.com/media/cnickol26/BigDataBowl2023/main/nfl-big-data-bowl-2023/week', as.character(1), '.csv', sep="")
# Read in all the weeks but only for the positons above
locations <- data.frame()
for (i in 1:8){
url <- paste('https://media.githubusercontent.com/media/cnickol26/BigDataBowl2023/main/nfl-big-data-bowl-2023/week', as.character(i), '.csv', sep="")
week_data <- read.csv(url)
week_data <- week_data[((week_data['nflId'] %in% players_list) |
(week_data['team'] == 'football')), ]
locations <- rbind(locations, week_data)
}
animate_play_full <- function(play_id){
df_examplePlay <- plays %>%
select(uniqueplayId, playDescription) %>%
filter(uniqueplayId==play_id)
#merging tracking data to play
df_examplePlayTracking <- inner_join(df_examplePlay,
locations,
by = "uniqueplayId") %>%
#Standardizing tracking data so its always in direction of offensive team.
mutate(x = ifelse(playDirection == "left", 120-x, x),
y = ifelse(playDirection == "left", 160/3 - y, y))
ball_location <- which(sort(unique(df_examplePlayTracking$team))=="football")
cols_fill <- c(1, 2, 3)
cols_fill[ball_location] <- "#663300"
cols_fill[as.numeric(cols_fill[1:3!=ball_location])] <- c("#013369", "#d50a0a")
cols_col <- c("#000000", "#000000", "#000000")
cols_col[ball_location] <- "#663300"
size_vals <- c(8, 8, 8)
size_vals[ball_location] <- 5
shape_vals <- c(21, 21, 21)
shape_vals[ball_location] <- 16
plot_title <- df_examplePlay$playDescription
nFrames <- max(df_examplePlayTracking$frameId)
field_min <- floor(min(df_examplePlayTracking$x))-5
field_max <- floor(max(df_examplePlayTracking$x))+5
#plotting
anim <- ggplot() +
#creating field underlay
gg_field(yardmin = field_min, yardmax = field_max) +
#filling forest green for behind back of endzone
theme(panel.background = element_rect(fill = "forestgreen",
color = "forestgreen"),
panel.grid = element_blank()) +
#setting size and color parameters
scale_size_manual(values = size_vals, guide = "none") +
scale_shape_manual(values = shape_vals, guide = "none") +
scale_fill_manual(values = cols_fill, guide = "none", na.value=NA) +
scale_colour_manual(values = cols_col, guide = "none") +
#adding players
geom_point(data = df_examplePlayTracking, aes(x = x,
y = y,
shape = team,
fill = team,
group = nflId,
size = team,
colour = team), alpha=0.7) +
#adding jersey numbers
geom_text(data = df_examplePlayTracking,
aes(x = x, y = y, label = jerseyNumber),
colour = "white",
vjust = 0.36, size = 3.5) +
#titling plot with play description
labs(title = plot_title) +
#setting animation parameters
transition_time(frameId)  +
ease_aes("linear")
animate(anim, width = 720, height = 440,fps = 10, nframes = nFrames)
}
animate_play_full(random_plays[1])
as.numeric(paste(as.character(locations$gameId),
as.character(locations$playId), sep=""))
locations$uniqueplayId <- as.numeric(paste(as.character(locations$gameId),
as.character(locations$playId), sep=""))
animate_play_full(random_plays[1])
locations %>% filter(uniqueplayId==random_plays[1]) %>% View()
unique(locations$nflId)
week_data[week_data['nflId'] %in% players_list,]
week_data['nflId']
url <- paste('https://media.githubusercontent.com/media/cnickol26/BigDataBowl2023/main/nfl-big-data-bowl-2023/week', as.character(8), '.csv', sep="")
week_data <- read.csv(url)
week_data[(week_data['nflId'] %in% players_list), ]
week_data$nflId
players_list
unique(week_data$nflId)
(week_data['nflId'] %in% players_list)
players$officialPosition
positions
players$officialPosition %in% positions
week_data$nflId %in% players_list
week_data <- week_data[((week_data$nflId %in% players_list) |
(week_data['team'] == 'football')), ]
week_data
unique(week_data$nflId)
# Read in all the weeks but only for the positons above
locations <- data.frame()
for (i in 1:8){
url <- paste('https://media.githubusercontent.com/media/cnickol26/BigDataBowl2023/main/nfl-big-data-bowl-2023/week', as.character(i), '.csv', sep="")
week_data <- read.csv(url)
week_data <- week_data[((week_data$nflId %in% players_list) |
(week_data['team'] == 'football')), ]
locations <- rbind(locations, week_data)
print(i)
}
locations$uniqueplayId <- as.numeric(paste(as.character(locations$gameId),
as.character(locations$playId), sep=""))
animate_play_full(random_plays[1])
animate_play_subset(random_plays[1])
animate_play_subset <- function(play_id){
df_examplePlay <- plays %>%
select(uniqueplayId, playDescription) %>%
filter(uniqueplayId==play_id)
#merging tracking data to play
df_examplePlayTracking <- inner_join(df_examplePlay,
subset,
by = "uniqueplayId") %>%
#Standardizing tracking data so its always in direction of offensive team.
mutate(x = ifelse(playDirection == "left", 120-x, x),
y = ifelse(playDirection == "left", 160/3 - y, y))
ball_location <- which(sort(unique(df_examplePlayTracking$team))=="football")
cols_fill <- c(1, 2, 3)
cols_fill[ball_location] <- "#663300"
cols_fill[as.numeric(cols_fill[1:3!=ball_location])] <- c("#013369", "#d50a0a")
cols_col <- c("#000000", "#000000", "#000000")
cols_col[ball_location] <- "#663300"
size_vals <- c(8, 8, 8)
size_vals[ball_location] <- 5
shape_vals <- c(21, 21, 21)
shape_vals[ball_location] <- 16
plot_title <- df_examplePlay$playDescription
nFrames <- max(df_examplePlayTracking$frameId)
field_min <- floor(min(df_examplePlayTracking$x))-5
field_max <- floor(max(df_examplePlayTracking$x))+5
#plotting
anim <- ggplot() +
#creating field underlay
gg_field(yardmin = field_min, yardmax = field_max) +
#filling forest green for behind back of endzone
theme(panel.background = element_rect(fill = "forestgreen",
color = "forestgreen"),
panel.grid = element_blank()) +
#setting size and color parameters
scale_size_manual(values = size_vals, guide = "none") +
scale_shape_manual(values = shape_vals, guide = "none") +
scale_fill_manual(values = cols_fill, guide = "none", na.value=NA) +
scale_colour_manual(values = cols_col, guide = "none") +
#adding players
geom_point(data = df_examplePlayTracking, aes(x = x,
y = y,
shape = team,
fill = team,
group = nflId,
size = team,
colour = team), alpha=0.7) +
#adding jersey numbers
geom_text(data = df_examplePlayTracking,
aes(x = x, y = y, label = jerseyNumber),
colour = "white",
vjust = 0.36, size = 3.5) +
#titling plot with play description
labs(title = plot_title) +
#setting animation parameters
transition_time(frameId)  +
ease_aes("linear")
animate(anim, width = 720, height = 440,fps = 10, nframes = nFrames)
}
animate_play_subset(random_plays[1])
rlang::last_error()
subset <-read.csv("data_not_flipped.csv")
subset
subset <-read.csv("https://github.com/cnickol26/BigDataBowl2023/blob/main/data_not_flipped.csv?raw=true")
animate_play_subset(random_plays[1])
animate_play_subset(random_plays[2])
unique(subset$team)
animate_play_full(random_plays[1])
animate_play_subset(random_plays[2])
sub_2 <- animate_play_subset(random_plays[2])
full_2 <- animate_play_full(random_plays[2])
warnings()
image_append(sub_2, full_2)
library(magick)
image_append(sub_2, full_2)
sub_1_m <- image_read(sub_1)
sub_1 <- animate_play_subset(random_plays[1])
full_1 <- animate_play_full(random_plays[1])
sub_1_m <- image_read(sub_1)
full_1_m <- image_read(full_1)
image_append(sub_1_m, full_1_m)
sub_1_m
nrow(sub_1_m)
length(sub_1_m)
combined_1 <- image_append(c(sub_1_m[1], full_1_m[1]))
combined_1
2:length(sub_1_m)
for(i in 2:length(sub_1_m)){
combined <- image_append(c(sub_1_m[i], full_1_m[i]))
new_gif <- c(new_gif, combined)
}
combined_1 <- image_append(c(sub_1_m[1], full_1_m[1]))
for(i in 2:length(sub_1_m)){
temp <- image_append(c(sub_1_m[i], full_1_m[i]))
combined_1 <- c(combined_1, temp)
}
combined_1
animate(combined_1)
image_animate(combined_1)
knitr::opts_chunk$set(echo = TRUE)
combined_1
combined_1
sub_1
full_1
sub_1
full_1
library(gridExtra)
grid.arrange(sub_1, full_1, ncol=2)
sub_1_m <- image_read(sub_1)
full_1_m <- image_read(full_1)
combined_1 <- image_append(c(sub_1_m[1], full_1_m[1]), stack=T)
for(i in 2:length(sub_1_m)){
temp <- image_append(c(sub_1_m[i], full_1_m[i]), stack=T)
combined_1 <- c(combined_1, temp)
}
combined_1
subset <-read.csv("https://github.com/cnickol26/BigDataBowl2023/blob/main/data_not_flipped.csv?raw=true")
image_animate(combine_1)
image_animate(combined_1)
image_animate(sub_1_m)
sub_1 <- animate_play_subset(random_plays[1])
sub_1
full_1 <- animate_play_full(random_plays[1])
full_1
sub_1
sub_2 <- animate_play_subset(random_plays[2])
full_2 <- animate_play_full(random_plays[2])
full_2
sub_2
full_2
sub_3 <- animate_play_subset(random_plays[3])
full_3 <- animate_play_full(random_plays[3])
full_3
sub_3
sub_4 <- animate_play_subset(random_plays[4])
full_4 <- animate_play_full(random_plays[4])
full_4
sub_4
sub_5 <- animate_play_subset(random_plays[5])
full_5 <- animate_play_full(random_plays[5])
full_5
sub_5
sub_6 <- animate_play_subset(random_plays[6])
full_6 <- animate_play_full(random_plays[6])
full_6
sub_6
full_6
sub_7
sub_7 <- animate_play_subset(random_plays[7])
full_7 <- animate_play_full(random_plays[7])
full_7
sub_7
sub_8 <- animate_play_subset(random_plays[8])
full_8 <- animate_play_full(random_plays[8])
full_8
sub_8
sub_9 <- animate_play_subset(random_plays[9])
full_9 <- animate_play_full(random_plays[9])
full_9
sub_9
sub_10 <- animate_play_subset(random_plays[10])
full_10 <- animate_play_full(random_plays[10])
full_10
sub_10
full_1
full_2
full_3
full_4
random_plays[4]
random_plays[4]/100
random_plays[4]*100
random_plays[4]/1000
random_plays[4]/10
random_plays[4]/100000
round(random_plays[4])
round(random_plays[4], 2)
format(random_plays[4], scientific = FALSE)
sub_1
random_plays[1]
format(random_plays[1], scientific = F)
full_1
sub_1
full_2
sub_2
full_2
sub_2
full_2
sub_3
format(random_plays[3], scientific = F)
full_4
sub_4
full_4
sub_5
full_5
sub_6
full_6
sub_7
full_7
sub_7
sub_8
full_8
sub_9
full_9
sub_9
full_9
sub_10
full_10
sub_3
full_3
sub_1
sub_2
full_2
sub_2
full_2
sub_3
full_3
sub_3
sub_4
full_4
sub_4
full_4
sub_5
full_5
sub_6
full_6
sub_7
full_7
full_7
sub_7
sub_8
full_8
sub_8
full_8
sub_9
full_9
sub_9
sub_9
full_9
sub_9
full_9
sub_10
full_10
sub_10
sub_11 <- animate_play_subset(random_plays[11])
full_11 <- animate_play_full(random_plays[11])
full_11
sub_11
full_11
sub_12 <- animate_play_subset(random_plays[11])
full_12 <- animate_play_full(random_plays[11])
full_12
sub_12 <- animate_play_subset(random_plays[12])
full_12 <- animate_play_full(random_plays[12])
full_12
sub_12
sub_13 <- animate_play_subset(random_plays[13])
full_13 <- animate_play_full(random_plays[13])
full_13
sub_13
full_13
sub_14 <- animate_play_subset(random_plays[14])
full_14 <- animate_play_full(random_plays[14])
full_14
sub_14
full_14
sub_14
full_14
full_13
full_12
sub_12
full_14
full_14
sub_14
full_14
sub_14
sub_19_frame <- animate_play_subset(20210912103127)
full_19_frame <- animate_play_full(20210912103127)
full_19_frame
sub_19_frame
full_19_frame
full_14
full_13
sub_13
random_plays[13]
format(random_plays[13], scientific=F)
animate_play_full(20210909003862)
animate_play_subset(20210909003862)
locations %>% filter(uniqueplayId==20210912103127) %>% select(game_Id)
locations %>% filter(uniqueplayId==20210912103127)
locations %>% filter(uniqueplayId==20210912103127) %>% select(gameId)
locations %>% filter(gameId==2021091210, quarter=3)
locations %>% filter(gameId==2021091210, quarter==3)
columns(locations)
locations
View(locations)
View(plays)
plays %>% filter(gameId==2021091210, quarter==3)
plays %>% filter(gameId==2021091210, quarter==3) %>% View()
plays %>% filter(gameId==2021090900, quarter==3) %>% View()
animate_play_full(20210909002871)
animate_play_full(202109090097)
animate_play_subset(202109090097)
animate_play_full(202109090097)
animate_play_subset(202109090097)
animate_play_full(202109190076)
animate_play_subset(202109190076)
animate_play_subset(202109190975)
animate_play_subset(202109261175)
animate_play_subset(202110030976)
animate_play_full(202110030976)
animate_play_subset(202110030976)
animate_play_full(202110030976)
animate_play_subset(20211025001619)
animate_play_full(202110030976)
animate_play_subset(20211025001619)
animate_play_full(20211025001619)
animate_play_subset(202109190975)
animate_play_subset(20211017063573)
# test 1
test_1 <- animate_play_subset(20210926112818)
test_1
# test 2
test_2 <- animate_play_subset(2021092602494)
test_2
animate_play_subset(202109090097)
animate_play_subset(202109190076)
animate_play_subset(20211025002934)
animate_play_subset(20211010043129)
animate_play_subset(202109120163)
animate_play_subset(202109120578)
animate_play_subset(202109120676)
animate_play_subset(202109120578)
animate_play_subset(202109120578)
animate_play_subset(202109120578)
animate_play_full(202109120578)
animate_play_full(20211017063573)
animate_play_full(202109120578)
animate_play_subset(202109120163)
animate_play_subset(202109120676)
animate_play_subset(202109190595)
animate_play_subset(20210926133182)
animate_play_full(2021090900788)
animate_play_subset(202109190975)
animate_play_subset(20211025003926)
library(tidyverse)
library(gganimate)
library(ggplot2)
library(cowplot)
library(repr)
library(gridExtra)
animate_play_subset(20211025003926)
